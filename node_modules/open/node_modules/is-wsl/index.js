'use strict';
const os = require('os');
const fs = require('fs');
<<<<<<< HEAD
const isDocker = require('is-docker');
=======
<<<<<<< HEAD
<<<<<<< HEAD
const isDocker = require('is-docker');
=======
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
const isDocker = require('is-docker');
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17

const isWsl = () => {
	if (process.platform !== 'linux') {
		return false;
	}

	if (os.release().toLowerCase().includes('microsoft')) {
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17
		if (isDocker()) {
			return false;
		}

<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17
		return true;
	}

	try {
<<<<<<< HEAD
		return fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') ?
			!isDocker() : false;
=======
<<<<<<< HEAD
<<<<<<< HEAD
		return fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') ?
			!isDocker() : false;
=======
		return fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft');
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
		return fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') ?
			!isDocker() : false;
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17
	} catch (_) {
		return false;
	}
};

if (process.env.__IS_WSL_TEST__) {
	module.exports = isWsl;
} else {
	module.exports = isWsl();
}
