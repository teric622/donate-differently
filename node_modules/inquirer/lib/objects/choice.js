'use strict';
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17
var _ = {
  isString: require('lodash/isString'),
  isNumber: require('lodash/isNumber'),
  extend: require('lodash/extend'),
  isFunction: require('lodash/isFunction'),
};
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
var _ = require('lodash');
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17

/**
 * Choice object
 * Normalize input as choice object
 * @constructor
 * @param {Number|String|Object} val  Choice value. If an object is passed, it should contains
 *                                    at least one of `value` or `name` property
 */

module.exports = class Choice {
  constructor(val, answers) {
    // Don't process Choice and Separator object
    if (val instanceof Choice || val.type === 'separator') {
<<<<<<< HEAD
      // eslint-disable-next-line no-constructor-return
=======
<<<<<<< HEAD
<<<<<<< HEAD
      // eslint-disable-next-line no-constructor-return
=======
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
      // eslint-disable-next-line no-constructor-return
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17
      return val;
    }

    if (_.isString(val) || _.isNumber(val)) {
      this.name = String(val);
      this.value = val;
      this.short = String(val);
    } else {
      _.extend(this, val, {
        name: val.name || val.value,
        value: 'value' in val ? val.value : val.name,
<<<<<<< HEAD
        short: val.short || val.name || val.value,
=======
<<<<<<< HEAD
<<<<<<< HEAD
        short: val.short || val.name || val.value,
=======
        short: val.short || val.name || val.value
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
        short: val.short || val.name || val.value,
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17
      });
    }

    if (_.isFunction(val.disabled)) {
      this.disabled = val.disabled(answers);
    } else {
      this.disabled = val.disabled;
    }
  }
};
