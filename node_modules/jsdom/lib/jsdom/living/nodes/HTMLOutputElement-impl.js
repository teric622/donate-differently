"use strict";

<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
=======
const DOMTokenList = require("../generated/DOMTokenList");
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17
const HTMLElementImpl = require("./HTMLElement-impl").implementation;
const DefaultConstraintValidationImpl =
  require("../constraint-validation/DefaultConstraintValidation-impl").implementation;
const { mixin } = require("../../utils");
<<<<<<< HEAD
const { getLabelsForLabelable } = require("../helpers/form-controls");
=======
<<<<<<< HEAD
<<<<<<< HEAD
const { getLabelsForLabelable } = require("../helpers/form-controls");
=======
const { getLabelsForLabelable, formOwner } = require("../helpers/form-controls");
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
const { getLabelsForLabelable } = require("../helpers/form-controls");
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17

class HTMLOutputElementImpl extends HTMLElementImpl {
  constructor(args, privateData) {
    super(args, privateData);
    this._labels = null;
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
=======
    this._defaultValue = "";
    this._valueMode = "default";

    this._customValidityErrorMessage = "";
  }

  _attrModified(name, value, oldValue) {
    super._attrModified(name, value, oldValue);

    if (name === "for" && this._htmlFor !== undefined) {
      this._htmlFor.attrModified();
    }
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17
  }

  _barredFromConstraintValidationSpecialization() {
    return true;
  }

<<<<<<< HEAD
  get labels() {
    return getLabelsForLabelable(this);
  }
=======
<<<<<<< HEAD
<<<<<<< HEAD
  get labels() {
    return getLabelsForLabelable(this);
  }
=======
  _formReset() {
    if (this._valueMode === "value") {
      this.textContent = this._defaultValue;
    }

    this._defaultValue = "";
    this._valueMode = "default";
  }

  get htmlFor() {
    if (this._htmlFor === undefined) {
      this._htmlFor = DOMTokenList.createImpl([], {
        element: this,
        attributeLocalName: "for"
      });
    }
    return this._htmlFor;
  }

  get type() {
    return "output";
  }

  get labels() {
    return getLabelsForLabelable(this);
  }

  get form() {
    return formOwner(this);
  }

  get value() {
    return this.textContent;
  }

  set value(val) {
    this._valueMode = "value";
    this._defaultValue = this.textContent;
    this.textContent = val;
  }

  get defaultValue() {
    return this._valueMode === "default" ? this.textContent : this._defaultValue;
  }

  set defaultValue(val) {
    this._defaultValue = val;

    if (this._valueMode === "default") {
      this.textContent = val;
    }
  }
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
  get labels() {
    return getLabelsForLabelable(this);
  }
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
>>>>>>> 71cc80d5c04c1d732a53d72b3d4830571f913b17
}

mixin(HTMLOutputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);

module.exports = {
  implementation: HTMLOutputElementImpl
};
